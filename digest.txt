Directory structure:
└── .//
    ├── init.lua
    ├── lua/
    │   ├── plugins/
    │   │   └── init.lua
    │   ├── mappings.lua
    │   ├── configs/
    │   │   ├── lspconfig.lua
    │   │   ├── conform.lua
    │   │   └── lazy.lua
    │   ├── options.lua
    │   └── chadrc.lua
    ├── lazy-lock.json
    ├── init.lua.save
    └── .stylua.toml

================================================
File: /init.lua
================================================
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

-- bootstrap lazy and all plugins
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require "configs.lazy"

-- load plugins
require("lazy").setup({
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },

  { import = "plugins" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require "options"
require "nvchad.autocmds"

vim.schedule(function()
  require "mappings"
end)



================================================
File: /lua/plugins/init.lua
================================================
return {
  {
    "stevearc/conform.nvim",
    -- event = 'BufWritePre', -- uncomment for format on save
    opts = require "configs.conform",
  },

  -- These are some examples, uncomment them if you want to see them work!
  {
    "neovim/nvim-lspconfig",
    config = function()
      require "configs.lspconfig"
    end,
  },
  {
    "mrcjkb/rustaceanvim",
    version = "^5", -- Recommended
    lazy = false, -- This plugin is already lazy
    config = function()
      local mason_registry = require "mason-registry"
      local codelldb = mason_registry.get_package "codelldb"
      local extension_path = codelldb:get_install_path() .. "/extension/"
      local codelldb_path = extension_path .. "adapter/codelldb"
      local liblldb_path = extension_path .. "lldb/lib/liblldb.dylib"
      local cfg = require "rustaceanvim.config"

      vim.g.rustaceanvim = {
        dap = {
          adapter = cfg.get_codelldb_adapter(codelldb_path, liblldb_path),
        },
      }
    end,
  },
  {
    "mfussenegger/nvim-dap",
    config = function()
      local dap, dapui = require "dap", require "dapui"
      dap.listeners.before.attach.dapui_config = function()
        dapui.open()
      end
      dap.listeners.before.launch.dapui_config = function()
        dapui.open()
      end
      dap.listeners.before.event_terminated.dapui_config = function()
        dapui.close()
      end
      dap.listeners.before.event_exited.dapui_config = function()
        dapui.close()
      end
    end,
  },
  {
    "rcarriga/nvim-dap-ui",
    dependencies = { "mfussenegger/nvim-dap", "nvim-neotest/nvim-nio" },
    config = function()
      require("dapui").setup()
    end,
  },
  {
    "saecki/crates.nvim",
    ft = { "toml" },
    config = function()
      require("crates").setup {
        completion = {
          cmp = {
            enabled = true,
          },
        },
      }
      require("cmp").setup.buffer {
        sources = { { name = "crates" } },
      }
    end,
  },
  {
    "nvim-treesitter/nvim-treesitter",
    opts = {
      ensure_installed = {
        "javascript", -- or "typescript"
        "rust",
        "go",
        "python",
        "lua",
      },
      highlight = {
        enabled = true,
        additional_vim_regex_highlighting = true,
      },
      fold = {
        enable = true
      }
    },
  },
  {
    "github/copilot.vim",
    lazy = false,
    config = function()
      -- Disable default Tab mapping to prevent conflicts
      vim.g.copilot_no_tab_map = true
      vim.g.copilot_assume_mapped = true
    end,
  },
  {
    "CopilotC-Nvim/CopilotChat.nvim",
    dependencies = {
      { "github/copilot.vim" },
      { "nvim-lua/plenary.nvim", branch = "master" },
    },
    build = "make tiktoken", -- Only on MacOS or Linux
    opts = {
      -- See Configuration section for options
    },
  },
  {
    "nvim-telescope/telescope.nvim",
    dependencies = {
      {
        "nvim-telescope/telescope-live-grep-args.nvim",
      },
    },
    opts = function(_, opts)
      local lga_actions = require "telescope-live-grep-args.actions"
      opts.extensions = {
        live_grep_args = {
          auto_quoting = true, -- enable/disable auto-quoting
          -- define mappings, e.g.
          mappings = { -- extend mappings
            i = {
              ["<C-k>"] = lga_actions.quote_prompt(),
              ["<C-i>"] = lga_actions.quote_prompt { postfix = " --iglob " },
            },
          },
          -- ... also accepts theme settings, for example:
          -- theme = "dropdown", -- use dropdown theme
          -- theme = { }, -- use own theme spec
          -- layout_config = { mirror=true }, -- mirror preview pane
        },
      }
    end,
    keys = {
      {
        "<leader>/",
        "<cmd>lua require('telescope').extensions.live_grep_args.live_grep_args()<CR>",
        desc = "Grep (root dir)",
      },
    },
    config = function(_, opts)
      local tele = require "telescope"
      tele.setup(opts)
      tele.load_extension "live_grep_args"
    end,
  },
  {
    "rmagatti/auto-session",
    lazy = false, -- ensure the plugin loads at startup
    config = function()
      require("auto-session").setup {
        log_level = "error", -- suppress extra messages
        auto_session_enabled = true, -- enable session management
        auto_save_enabled = true, -- save session on exit
        auto_restore_enabled = true, -- automatically load session on startup
        auto_session_root_dir = vim.fn.stdpath "data" .. "/sessions/", -- where to store sessions
        auto_session_use_git_branch = false, -- (optional) don’t split sessions by git branch
      }
    end,
  },
  {
    "aliqyan-21/wit.nvim",
    lazy = false,
    config = function()
      require("wit").setup {
        engine = "google",
        -- Optional: customize command names
        command_search = "WitSearch",
        command_search_visual = "WitSearchVisual",
        command_search_wiki = "WitSearchWiki",
      }
    end,
  },
}


================================================
File: /lua/mappings.lua
================================================
require "nvchad.mappings"

-- add yours here

local map = vim.keymap.set
local telescope = require "telescope"

map("n", ";", ":", { desc = "CMD enter command mode" })
map("i", "jk", "<ESC>")

-- Nvim DAP
map("n", "<Leader>dl", "<cmd>lua require'dap'.step_into()<CR>", { desc = "Debugger step into" })
map("n", "<Leader>dj", "<cmd>lua require'dap'.step_over()<CR>", { desc = "Debugger step over" })
map("n", "<Leader>dk", "<cmd>lua require'dap'.step_out()<CR>", { desc = "Debugger step out" })
map("n", "<Leader>dc", "<cmd>lua require'dap'.continue()<CR>", { desc = "Debugger continue" })
map("n", "<Leader>db", "<cmd>lua require'dap'.toggle_breakpoint()<CR>", { desc = "Debugger toggle breakpoint" })
map(
  "n",
  "<Leader>dd",
  "<cmd>lua require'dap'.set_breakpoint(vim.fn.input('Breakpoint condition: '))<CR>",
  { desc = "Debugger set conditional breakpoint" }
)
map("n", "<Leader>de", "<cmd>lua require'dap'.terminate()<CR>", { desc = "Debugger reset" })
map("n", "<Leader>dr", "<cmd>lua require'dap'.run_last()<CR>", { desc = "Debugger run last" })

-- rustaceanvim
map("n", "<Leader>dt", "<cmd>lua vim.cmd('RustLsp testables')<CR>", { desc = "Debugger testables" })

map("n", "<C-e>", "<C-e>", { noremap = true, silent = true })
map("n", "<C-y>", "<C-y>", { noremap = true, silent = true })

map("n", "<C-h>", "<C-w>h", { noremap = true, silent = true })
map("n", "<C-j>", "<C-w>j", { noremap = true, silent = true })
map("n", "<C-k>", "<C-w>k", { noremap = true, silent = true })
map("n", "<C-l>", "<C-w>l", { noremap = true, silent = true })

-- map({ "n", "i", "v" }, "<C-s>", "<cmd> w <cr>")

map("n", "<C-d>", vim.lsp.buf.definition, { noremap = true, silent = true })

map("i", "<C-l>", 'copilot#Accept("<CR>")', { expr = true, silent = true, noremap = true })

map("n", "<Leader>ct", function()
  local copilot_enabled = vim.g.copilot_enabled or false
  if copilot_enabled then
    vim.cmd "Copilot disable"
    vim.g.copilot_enabled = false
    print "Copilot disabled"
  else
    vim.cmd "Copilot enable"
    vim.g.copilot_enabled = true
    print "Copilot enabled"
  end
end, { desc = "Toggle Copilot" })

map("n", "<leader>cc", ":Lazy load CopilotChat.nvim | CopilotChat<CR>", { noremap = true, silent = true })
-- map("n", "<leader>fg", function()
--   require("telescope").extensions.live_grep_args.live_grep_args()
-- end, { desc = "Live Grep with Args" })

-- map("n", "<leader>gr", function()
--   local word = vim.fn.expand("<cword>")
--   vim.cmd("vimgrep /" .. word .. "/gj **/*.*")
--   vim.cmd("copen")
-- end, { desc = "Grep current word in project" })

map("n", "<leader>gr", function()
  local word = vim.fn.expand "<cword>"
  require("telescope").extensions.live_grep_args.live_grep_args { default_text = word }
end, { desc = "Live Grep current word with preview" })

map("n", "<leader>ws", ":WitSearch ", { noremap = true, silent = false, desc = "Wit: Web Search" })
map("n", "<leader>ww", ":WitSearchWiki ", { noremap = true, silent = false, desc = "Wit: Wikipedia Search" })
map("v", "<leader>ws", ":WitSearchVisual<CR>", { noremap = true, silent = false, desc = "Wit: Visual Web Search" })

map("n", "<leader>tw", function()
  vim.wo.wrap = not vim.wo.wrap
  print("Line wrap " .. (vim.wo.wrap and "enabled" or "disabled"))
end, { desc = "Toggle line wrap" })

map("n", "<leader>gb", function()
  require("gitsigns").toggle_current_line_blame()
end, { desc = "Toggle Git blame" })

map("n", "<leader>ge", function()
  local task_file = vim.fn.input "Task file path: "
  if task_file == "" then
    print "No task file provided!"
    return
  end

  task_file = vim.fn.expand(task_file)

  -- Read and parse JSON file
  local file = io.open(task_file, "r")
  if not file then
    vim.notify("File not found: " .. task_file, vim.log.levels.ERROR)
    return
  end

  local json_content = file:read "*a"
  file:close()

  local ok, data = pcall(vim.json.decode, json_content)
  if not ok then
    vim.notify("Failed to parse JSON file", vim.log.levels.ERROR)
    return
  end

  local env_vars = {}
  for _, container in ipairs(data.containerDefinitions or {}) do
    if container.name == "init" then
      for _, env in ipairs(container.environment or {}) do
        table.insert(env_vars, env.name .. "=" .. (env.value or ""))
      end
      break
    end
  end

  if #env_vars == 0 then
    vim.notify("⚠️ No environment variables found in container definition", vim.log.levels.WARN)
    return
  end

  local output_file = vim.fn.getcwd() .. "/.env"
  local out = io.open(output_file, "w")
  if out then
    out:write(table.concat(env_vars, "\n"))
    out:close()
    vim.notify(".env file generated at: " .. output_file, vim.log.levels.INFO)
  else
    vim.notify("Failed to write .env file", vim.log.levels.ERROR)
  end
end, { desc = "Generate .env from ECS task definition" })


================================================
File: /lua/configs/lspconfig.lua
================================================
-- load defaults i.e lua_lsp
require("nvchad.configs.lspconfig").defaults()

local lspconfig = require "lspconfig"

-- EXAMPLE
local servers = { "html", "cssls", "ts_ls", "marksman" }
local nvlsp = require "nvchad.configs.lspconfig"

-- lsps with default config
for _, lsp in ipairs(servers) do
  lspconfig[lsp].setup {
    on_attach = nvlsp.on_attach,
    on_init = nvlsp.on_init,
    capabilities = nvlsp.capabilities,
  }
end

-- Configure diagnostic display to hide warnings
vim.diagnostic.config {
  virtual_text = {
    severity = { min = vim.diagnostic.severity.ERROR },
  },
  signs = {
    severity = { min = vim.diagnostic.severity.ERROR },
  },
  underline = {
    severity = { min = vim.diagnostic.severity.ERROR },
  },
  float = {
    severity = { min = vim.diagnostic.severity.ERROR },
  },
}

local on_attach = function(client, bufnr)
  -- Enable formatting capability but skip for Python files
  if client.server_capabilities.documentFormattingProvider then
    local ft = vim.bo[bufnr].filetype
    if ft ~= "python" then -- Skip autoformatting for Python
      vim.api.nvim_create_autocmd("BufWritePre", {
        group = vim.api.nvim_create_augroup("FormatOnSave", { clear = true }),
        buffer = bufnr,
        callback = function()
          vim.lsp.buf.format { async = false }
          vim.lsp.buf.code_action { only = { "source.organizeImports" } }
        end,
      })
    end
  end
end

local go_on_attach = function(client, bufnr)
  if client.server_capabilities.documentFormattingProvider then
    vim.api.nvim_create_autocmd("BufWritePre", {
      group = vim.api.nvim_create_augroup("GoFormatOnSave", { clear = true }),
      buffer = bufnr,
      callback = function()
        -- Format without prompts
        vim.lsp.buf.format { async = false }

        -- Auto-import without prompts (uses goimports)
        local params = vim.lsp.util.make_range_params()
        params.context = { only = { "source.organizeImports" } }
        local result = vim.lsp.buf_request_sync(bufnr, "textDocument/codeAction", params, 3000)
        for _, res in pairs(result or {}) do
          for _, r in pairs(res.result or {}) do
            if r.edit then
              vim.lsp.util.apply_workspace_edit(r.edit, "UTF-8")
            else
              vim.lsp.buf.execute_command(r.command)
            end
          end
        end
      end,
    })
  end
end

lspconfig.gopls.setup {
  on_attach = go_on_attach, -- Use Go-specific on_attach
  capabilities = nvlsp.capabilities,
  on_init = nvlsp.on_init,
  cmd = { "gopls" },
  filetypes = { "go", "gomod", "gowork", "gotmpl" },
  root_dir = lspconfig.util.root_pattern("go.work", "go.mod", ".git"),
  settings = {
    gopls = {
      staticcheck = true,
      gofumpt = true,
      usePlaceholders = true,
      analyses = {
        unusedparams = true,
        shadow = true,
        nilness = true,
        useany = true,
      },
      codelenses = {
        gc_details = true,  -- Show gc optimization details
        generate = true,    -- Show generate code lens
        regenerate_cgo = true,
        tidy = true,        -- Show go mod tidy lens
        upgrade_dependency = true,
      },
      hints = {
        assignVariableTypes = true,
        compositeLiteralFields = true,
        compositeLiteralTypes = true,
        constantValues = true,
        functionTypeParameters = true,
        parameterNames = true,
        rangeVariableTypes = true,
      },
      experimentalPostfixCompletions = true,
      completeUnimported = true,
      vulncheck = "Imports",
    },
  },
}

lspconfig.ts_ls.setup {
  on_attach = nvlsp.on_attach,
  capabilities = nvlsp.capabilities,
  on_init = nvlsp.on_init,
  cmd = { "typescript-language-server", "--stdio" },
  filetypes = { "javascript", "typescript", "javascriptreact", "typescriptreact", "vue" },
  root_dir = lspconfig.util.root_pattern("package.json", "tsconfig.json", ".git"),
  settings = {
    javascript = {
      format = { enable = true },
    },
    typescript = {
      format = { enable = true },
    },
  },
}

lspconfig.pyright.setup {
  on_attach = on_attach,
  capabilities = nvlsp.capabilities,
  on_init = nvlsp.on_init,
  filetypes = { "python" },
  root_dir = lspconfig.util.root_pattern(".git", "pyproject.toml", "setup.py", "setup.cfg", "requirements.txt"),
  settings = {
    python = {
      analysis = {
        typeCheckingMode = "basic",
        autoSearchPaths = true,
        useLibraryCodeForTypes = true,
        diagnosticSeverityOverrides = {
          reportGeneralTypeIssues = "error", -- Only show errors, not warnings
          reportOptionalMemberAccess = "none", -- Disable optional member access warnings
          reportOptionalSubscript = "none", -- Disable optional subscript warnings
          reportOptionalCall = "none", -- Disable optional call warnings
          reportOptionalIterable = "none", -- Disable optional iterable warnings
          reportOptionalContextManager = "none", -- Disable optional context manager warnings
          reportOptionalOperand = "none", -- Disable optional operand warnings
          reportUnusedImport = "none", -- Disable unused import warnings
          reportUnusedClass = "none", -- Disable unused class warnings
          reportUnusedFunction = "none", -- Disable unused function warnings
          reportUnusedVariable = "none", -- Disable unused variable warnings
          reportDuplicateImport = "none", -- Disable duplicate import warnings
          reportWildcardImportFromLibrary = "none", -- Disable wildcard import warnings
          reportPrivateUsage = "none", -- Disable private usage warnings
          reportConstantRedefinition = "none", -- Disable constant redefinition warnings
          reportIncompatibleMethodOverride = "error", -- Keep method override errors
          reportMissingImports = "error", -- Keep missing import errors
          reportUndefinedVariable = "error", -- Keep undefined variable errors
        },
      },
    },
  },
}

-- Update pylsp with disabled linters/warnings
lspconfig.pylsp.setup {
  on_attach = on_attach,
  capabilities = vim.lsp.protocol.make_client_capabilities(),
  settings = {
    pylsp = {
      plugins = {
        pycodestyle = { enabled = false }, -- Disable style checking
        pyflakes = { enabled = false }, -- Disable pyflakes warnings
        pylint = { enabled = false }, -- Disable pylint
        pyls_isort = { enabled = true }, -- Keep import sorting
        pylsp_mypy = {
          enabled = true,
          report_progress = true,
          live_mode = false,
          dmypy = false,
          strict = false,
        },
        pylsp_black = { enabled = true }, -- Keep black formatting
        pylsp_rope = { enabled = true }, -- Keep rope refactoring
      },
    },
  },
}

lspconfig.marksman.setup {
  on_attach = on_attach,
  capabilities = nvlsp.capabilities,
  on_init = nvlsp.on_init,
  filetypes = { "markdown" },
  root_dir = lspconfig.util.root_pattern(".git", ".marksman.toml"),
}

lspconfig.kotlin_language_server.setup {
  on_attach = on_attach,
  capabilities = nvlsp.capabilities,
  on_init = nvlsp.on_init,
  cmd = { "kotlin-language-server" },
  filetypes = { "kotlin" },
  root_dir = lspconfig.util.root_pattern(
    "settings.gradle",
    "settings.gradle.kts",
    "build.gradle",
    "build.gradle.kts",
    ".git"
  ),
  settings = {
    kotlin = {
      compiler = {
        jvm = {
          target = "1.8",
        },
      },
    },
  },
}


================================================
File: /lua/configs/conform.lua
================================================
local options = {
  formatters_by_ft = {
    lua = { "stylua" },
    -- css = { "prettier" },
    -- html = { "prettier" },
  },

  -- format_on_save = {
  --   -- These options will be passed to conform.format()
  --   timeout_ms = 500,
  --   lsp_fallback = true,
  -- },
}

return options


================================================
File: /lua/configs/lazy.lua
================================================
return {
  defaults = { lazy = true },
  install = { colorscheme = { "nvchad" } },

  ui = {
    icons = {
      ft = "",
      lazy = "󰂠 ",
      loaded = "",
      not_loaded = "",
    },
  },

  performance = {
    rtp = {
      disabled_plugins = {
        "2html_plugin",
        "tohtml",
        "getscript",
        "getscriptPlugin",
        "gzip",
        "logipat",
        "netrw",
        "netrwPlugin",
        "netrwSettings",
        "netrwFileHandlers",
        "matchit",
        "tar",
        "tarPlugin",
        "rrhelper",
        "spellfile_plugin",
        "vimball",
        "vimballPlugin",
        "zip",
        "zipPlugin",
        "tutor",
        "rplugin",
        "syntax",
        "synmenu",
        "optwin",
        "compiler",
        "bugreport",
        "ftplugin",
      },
    },
  },
}


================================================
File: /lua/options.lua
================================================
require "nvchad.options"

-- add yours here!

-- local o = vim.o
-- o.cursorlineopt ='both' -- to enable cursorline!
--

local opt = vim.opt

-- Enable folding based on Tree-sitter
opt.foldmethod = "expr"
opt.foldexpr = "nvim_treesitter#foldexpr()"

-- Open all folds by default when opening a file
vim.api.nvim_create_autocmd({"BufReadPost", "FileReadPost"}, {
  pattern = "*",
  command = "normal! zR"
})



================================================
File: /lua/chadrc.lua
================================================
-- This file needs to have same structure as nvconfig.lua 
-- https://github.com/NvChad/ui/blob/v3.0/lua/nvconfig.lua
-- Please read that file to know all available options :( 

---@type ChadrcConfig
local M = {}

M.base46 = {
	theme = "dark_horizon",
}

-- M.plugins = {
--   ["nvim-telescope/telescope.nvim"] = {
--     override_options = {
--       defaults = {
--         vimgrep_arguments = {
--           'rg',
--           '--color=never',
--           '--no-heading',
--           '--with-filename',
--           '--line-number',
--           '--column',
--           '--smart-case',
--           '--hidden',
--           '--glob=!.git/*',
--           '--glob=!node_modules/*',
--         },
--       },
--     },
--   },
-- }

return M


================================================
File: /lazy-lock.json
================================================
{
  "CopilotChat.nvim": { "branch": "main", "commit": "b8911c6da0d69f83fac46f613344fe9bbc6f670c" },
  "LuaSnip": { "branch": "master", "commit": "c9b9a22904c97d0eb69ccb9bab76037838326817" },
  "NvChad": { "branch": "v2.5", "commit": "6f25b2739684389ca69ea8229386c098c566c408" },
  "auto-session": { "branch": "main", "commit": "317412742990371f8e4709074da5c378456a27ff" },
  "base46": { "branch": "v2.5", "commit": "fde7a2cd54599e148d376f82980407c2d24b0fa2" },
  "cmp-buffer": { "branch": "main", "commit": "3022dbc9166796b644a841a02de8dd1cc1d311fa" },
  "cmp-nvim-lsp": { "branch": "main", "commit": "99290b3ec1322070bcfb9e846450a46f6efa50f0" },
  "cmp-nvim-lua": { "branch": "main", "commit": "f12408bdb54c39c23e67cab726264c10db33ada8" },
  "cmp-path": { "branch": "main", "commit": "91ff86cd9c29299a64f968ebb45846c485725f23" },
  "cmp_luasnip": { "branch": "master", "commit": "98d9cb5c2c38532bd9bdb481067b20fea8f32e90" },
  "conform.nvim": { "branch": "master", "commit": "f9ef25a7ef00267b7d13bfc00b0dea22d78702d5" },
  "copilot.vim": { "branch": "release", "commit": "5015939f131627a6a332c9e3ecad9a7cb4c2e549" },
  "crates.nvim": { "branch": "main", "commit": "fd2bbca7aa588f24ffc3517831934b4c4a9588e9" },
  "friendly-snippets": { "branch": "main", "commit": "efff286dd74c22f731cdec26a70b46e5b203c619" },
  "gitsigns.nvim": { "branch": "main", "commit": "7010000889bfb6c26065e0b0f7f1e6aa9163edd9" },
  "indent-blankline.nvim": { "branch": "master", "commit": "005b56001b2cb30bfa61b7986bc50657816ba4ba" },
  "lazy.nvim": { "branch": "main", "commit": "6c3bda4aca61a13a9c63f1c1d1b16b9d3be90d7a" },
  "mason.nvim": { "branch": "main", "commit": "fc98833b6da5de5a9c5b1446ac541577059555be" },
  "menu": { "branch": "main", "commit": "7769b17c2a131108c02b10e9f844e504aa605cc2" },
  "minty": { "branch": "main", "commit": "aafc9e8e0afe6bf57580858a2849578d8d8db9e0" },
  "nvim-autopairs": { "branch": "master", "commit": "6522027785b305269fa17088395dfc0f456cedd2" },
  "nvim-cmp": { "branch": "main", "commit": "1e1900b0769324a9675ef85b38f99cca29e203b3" },
  "nvim-dap": { "branch": "master", "commit": "6a5bba0ddea5d419a783e170c20988046376090d" },
  "nvim-dap-ui": { "branch": "master", "commit": "bc81f8d3440aede116f821114547a476b082b319" },
  "nvim-lspconfig": { "branch": "master", "commit": "fb733ac734249ccf293e5c8018981d4d8f59fa8f" },
  "nvim-nio": { "branch": "master", "commit": "21f5324bfac14e22ba26553caf69ec76ae8a7662" },
  "nvim-tree.lua": { "branch": "master", "commit": "c09ff35de503a41fa62465c6b4ae72d96e7a7ce4" },
  "nvim-treesitter": { "branch": "master", "commit": "b10436b9fb29d3c3c406c07ce813f70245f9bc7b" },
  "nvim-web-devicons": { "branch": "master", "commit": "4c3a5848ee0b09ecdea73adcd2a689190aeb728c" },
  "plenary.nvim": { "branch": "master", "commit": "857c5ac632080dba10aae49dba902ce3abf91b35" },
  "rustaceanvim": { "branch": "master", "commit": "448c76451ecf3c0edabcde427b7f1c8c219be2dd" },
  "telescope-live-grep-args.nvim": { "branch": "master", "commit": "b80ec2c70ec4f32571478b501218c8979fab5201" },
  "telescope.nvim": { "branch": "master", "commit": "a4ed82509cecc56df1c7138920a1aeaf246c0ac5" },
  "ui": { "branch": "v3.0", "commit": "75233833d84b930bc37fecdcd7eb73b5714e92e4" },
  "volt": { "branch": "main", "commit": "21a2351697abfed26d4469b88d3ab124d55a1b3f" },
  "which-key.nvim": { "branch": "main", "commit": "370ec46f710e058c9c1646273e6b225acf47cbed" },
  "wit.nvim": { "branch": "master", "commit": "1d9e1246554711b748fb1c8708f4b4a1631ffbad" }
}


================================================
File: /init.lua.save
================================================
vim.g.base46_cache = vim.fn.stdpath "data" .. "/base46/"
vim.g.mapleader = " "

-- bootstrap lazy and all plugins
local lazypath = vim.fn.stdpath "data" .. "/lazy/lazy.nvim"

if not vim.uv.fs_stat(lazypath) then
  local repo = "https://github.com/folke/lazy.nvim.git"
  vim.fn.system { "git", "clone", "--filter=blob:none", repo, "--branch=stable", lazypath }
end

vim.opt.rtp:prepend(lazypath)

local lazy_config = require "configs.lazy"

-- load plugins
require("lazy").setup({
  {
    "NvChad/NvChad",
    lazy = false,
    branch = "v2.5",
    import = "nvchad.plugins",
  },

  { import = "plugins" },
}, lazy_config)

-- load theme
dofile(vim.g.base46_cache .. "defaults")
dofile(vim.g.base46_cache .. "statusline")

require "options"
require "nvchad.autocmds"

vim.schedule(function()
  require "mappings"
end)



================================================
File: /.stylua.toml
================================================
column_width = 120
line_endings = "Unix"
indent_type = "Spaces"
indent_width = 2
quote_style = "AutoPreferDouble"
call_parentheses = "None"


